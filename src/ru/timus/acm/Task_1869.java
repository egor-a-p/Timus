package ru.timus.acm;

import java.util.Scanner;
/*
В жизни русского человека всегда есть место празднику. Особенно когда несколько поводов для празднования следуют один за другим — Новый год, Рождество, старый Новый год…
Все отмечают эти праздники по-разному. Кому-то нравится побыть в кругу семьи или друзей, а кого-то, наоборот, тянет в путешествия.
В компании «Сибирские железные дороги» решили совместить эти два варианта и запустили специальный круизный поезд «Бодун» по маршруту Владивосток--Москва--Владивосток.
Этот поезд будет курсировать всего один раз в год — в новогодние праздники. В поезде будут созданы все условия для того, чтобы любой из праздников можно было отмечать вплоть до следующего.
Ну, или до прибытия поезда в пункт назначения.
Спрос на билеты на данный поезд превзошёл все ожидания компании.
Их продажу пришлось прекратить уже на третий день, поскольку иначе поезд, вмещающий всех желающих, не встал бы ни на один вокзал.
Работники Сибирских железных дорог посчитали, сколько билетов продано на проезд между каждой парой станций,
и теперь хотят определить, сколько вагонов должно быть в поезде, чтобы хватило мест для всех пассажиров.
Исходные данные
В первой строке записано единственное целое число n — количество станций, на которых останавливается поезд при следовании в одну сторону (2 ≤ n ≤ 100).
Станции пронумерованы числами от 1 до n в порядке следования поезда, Владивосток имеет номер один, Москва — номер n.
Далее в n строках записана матрица aij размера n × n. Число aij равно количеству людей, купивших билет от станции i до станции j (0 ≤ aij ≤ 1 000; aii = 0).
Все aij целые.
Если i < j, то пассажиры, купившие билет от станции i до станции j, сядут на поезд, следующий из Владивостока в Москву, а если i > j, то на поезд, возвращающийся из Москвы во Владивосток.
Результат
Выведите единственное целое число — минимальное количество вагонов, которое должно быть в поезде, чтобы всем пассажирам хватило мест. В каждом вагоне ровно 36 мест.
 */
public class Task_1869 {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int[] a = new int[n];
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int number = input.nextInt();
                if (i < j) {
                    a[i] += number;
                    a[j] -= number;
                } else {
                    b[n - i - 1] += number;
                    b[n - j - 1] -= number;
                }
            }
        }

        int maxCount = 0;

        for (int i = 0; i < n; i++) {
            if (i > 0) {
                a[i] += a[i - 1];
                b[i] += b[i - 1];
            }
            if (a[i] > maxCount)
                maxCount = a[i];

            if (b[i] > maxCount)
                maxCount = b[i];
        }
        System.out.println((int) Math.ceil(maxCount / 36f));
    }
}
